++++++++++++++++++++++++++++++++++++++++ Section 1 - Introduction ++++++++++++++++++++++++++++++++++++++++

Why Multithreading?

    1. Take full advantage of modern hardware.
    2. Make programs more responsive.
    3. Everything is becoming threaded.
    4. Valuable skill in today's world.


++++++++++++++++++++++++++++++++++++++++ Section 2 - Review of Modern C++ Features ++++++++++++++++++++++++++++++++++++++++

Modern C++ Overview Part One -

    1. universal initialization
        1. Initializer(s) within a pair of braces.
        2. Can be used with any type.
            int x{7};                           // Equivalent to int x = 7;
            std::string str{"Let us begin"};    // Equivalent to string str("Let us begin");
        3. Narrowing conversions are not allowed.
            int x = 7.7;   // Legal, although compilers may warn
            int x{7.7};    // Illegal
        4. It can be used with compound types.
            std::vector<int>vec{4,2,3,5,1};

    2. null (C++98)
        1. Has the value 0.
        2. Its type is implementation defined.
            // Two functions which are overloaded
            void func(int);
            void func(int*);

            func(NULL); 
                // Calls func(int*) with clang
                // Calls func(int) with VC++
                // Does not compile with gcc

    3. nullptr (C++11 and above)
        1. A literal which represents a null pointer.
        2. It has a special type.
            1. Compatible with any pointer type.
            2. Cannot be converted to an integer.
            // Two functions which are overloaded
            void func(int);
            void func(int*);

            func(nullptr);    // Calls func(int*) as expected
    
    4. std::chrono durations
        1. Types which represent time intervals.
            1. Defined in <chrono>
            2. In the std::chrono namespace
            // Namespace alias to simplify the code
            namespace sc = std::chrono;
            sc::seconds(2);          // 2 second interval
            sc::milliseconds(20);    // 20 millisecond interval
            sc::microseconds(50);    // 50 microsecond interval

    5. std::chrono literals
        1. C++14 provides literals for these time intervals in the std::chrono::literals namespace.
        2. This is an inline namespace.
            using namespace std::literals;
            2s      // 2 second interval
            20ms    // 20 millisecond interval
            50us    // 50 microsecond interval
    
    6. auto type specifier, qualifier, and for-loop
        1. The compiler deduces the type from the initializer.
            auto x = 6;   // Equivalent to int x = 6;
            auto x{6};    // Equivalent to int x{6};    
        2. This is very useful with complicated types.
            std::vector<std::string>vec;
            auto it = vec.begin();    // Equivalent to std::vector<std::string>::iterator it = vec.begin();
        3. In modern C++, there are some cases where the type cannot be known by the programmer.
        4. auto will only give the underlying type.
            auto x = 6;    // x deduced as non-const
        5. const, reference, etc are ignored.
            const std::string& str = "Hello";    // Reference to a const string
            auto s = str;
                // s has type std::string
                // It is a mutable copy of str
        6. If we need them, we must add them ourselves
            const std::string& str = "Hello";
            const auto& s = str; 
                // s is a const reference to std::string
        7. We can use auto to simplify for-loop.
            std::vector<int>vec{4,3,1,2,5};
            for(auto it=vec.begin(); it!=vec.end(); ++it)
                std::cout<<*it<<" ";    // Prints out each element of vec
            for(auto it=vec.begin(); it!=vec.end(); ++it)
                *it+=2;    // Adds 2 to each element of vec 
        8. Special syntax for iterating over containers. To visit each element once, in order, without adding or removing elements. Otherwise, use a traditional loop.    
            std::vector<int>vec{4,3,1,2,5};
            for(auto i: vec)
                std::cout<<i<<" ";    // Prints out each element of vec
            // We need to use a reference to modify the elements
            for(auto& i: vec) 
                i+=2;


Modern C++ Overview Part Two - 

    1. lambda expression
        1. Similar to "closures" in other languages.
        2. Can be thought of as "local functions".
            1. Anonymous functions
            2. Defined inline in a single statement
        3. Ideal for short, simple helper functions which are only used once.
        4. Useful for passing as function arguments.
            1. More convenient than functors or function pointers.
        5. Can also be returned by functions.
        6. Very useful as predicates for algorithm calls.

    2. lambda expression syntax
        1. Similar to functions.
        2. Put [] instead of the function name.
        3. Write the arguments in the usual way.
        4. Write its body inline.
            [] (int arg) { return (2 * arg); };

    3. return type
        1. Deduced by the compiler in C++14.
            1. The return type must be the same in all paths.
            2. In C++17, can differ.
        2. In C++11, deduced for a single statement which returns a value.
            [] (int arg) { return (2 * arg); };
        3. Otherwise, must be specified with a trailing return type.
            [] (int arg) -> int { arg = (2 * arg); return arg; };

    4. callable object
        1. A lambda expression is a callable object.
        2. To invoke it, put a () after the body, with any arguments.
            [] (int arg) { return (2 * arg); }(3);    // Invoke the lambda with argument 3
        3. It can be stored in a variable of type auto.
            auto lam = [] (int arg) { return (2 * arg); };
                // Store the lambda in a variable
                // The compiler will provide the type (not known to us)
    
    5. capture
        1. capture by value
            1. A lambda expression can capture a local variable.
                1. Makes it available in the lambda's body.
                2. Put the name of the variable(s) inside the [].
                3. The lambda body contains an immutable copy of the local variable.
                    int n = 2;
                    [n] (int arg) { return (n * arg); };    // Captures the local variable n (immutable copy)
        2. capture by reference
            1. The lambda can change a captured variable.
            2. Put a & before the variable's name.
                int n = 2;
                [&n] (int arg) { return (++n * arg); };    // Captures the local variable n by reference

    6. implicit capture
        1. Captures all variables in scope.
            1. [=] captures all variables by value.
            2. [&] captures all variables by reference.
        2. We can be more selective.
            1. [=, &x] captures x by reference, all others by value.
            2. [&, =a, =b] captures a and b by value, all others by reference.

    7. lambda expressions in member functions
        1. To access the data members, capture "this".
            1. [this] () { return m_data % 2; };    // Captures all data members by reference
        2. The object is captured as a reference to *this.
        3. The lambda expression is able to modify data members.
            [this] (int arg) { return ++m_data * arg; };
    
    8. lambda expression example
        // Call std::count_if() algorithm using a lambda expression as predicate
        auto n_even = std::count_if(vec.begin(), vec.end(), 
            // The lambda definition goes inside the call
            [] (int n) { 
                return (n % 2 == 0); 
            }
        );


Modern C++ Overview Part Three - 

    1. move semantics
        1. C++11 optimization for copying objects.
            1. In some cases, the data can be moved into the target.
            2. Similar to moving files between folders.
        2. This is an important optimization, since C++ copies by default.
        3. Suppose, we have,
            1. Problem
                1. Consider how it could be executed more efficently.
                    std::vector<std::string>vec(1000000);    // A vector of 1 million strings
                    ....                                     // Polpulate vector
                    func(vec);                               // Move vec's data into the function argument
                    ....                                     // vec is not used again
                    ....
                2. When func() is called
                    1. No memory is allocated.
                    2. The elements are moved from vec into the function argument.
                    3. After the function call, vec is an empty vector.
            2. Solution
                1. Make func() argument an rvalue reference.
                    void func(std::vector<std::string>&& arg);
                    ....
                    std::vector<std::string> vec(1000000);    // A vector of 1 million strings
                    func(vec);                                // Doesn't compile
                2. An lvalue cannot be moved.

    2. lvalue and rvalue before C++ 
        1. A value can be either an lvalue or an rvalue.
        2. An lvalue may appear on the left of an assignment.
        3. An rvalue can only appear on the right.
            x = 2;    // x is an lvalue, 2 is an rvalue
            2 = x;    // Not legal C 

            x = func();    // x is an lvalue, func() is an rvalue
            func() = x;    // Not legal C, but can be legal in C++

    3. lvalue and rvalue in C++
        1. In C++, an lvalue represents a named memory location.
            1. It has a name.
            2. We can take its address using the & operator.
            3. x is an lvalue.    // name is x, &x is legal
        2. Anything else is an rvalue.
            1. 2 is an rvalue.         // 2 has no name, &2 is not legal
            2. func() is an rvalue.    // return value from function call has no name, &func() is not legal

    4. reference
        1. lvalue reference
            1. A reference is typically implemented as a pointer.
            2. The compiler adds code to dereference the pointer.
                int x;
                int& y = x;    // Equivalent to int *y = &x;
                y = 3;         // Equivalent to *y = 3;
            3. This requires that x has an address.
                1. x must be an lvalue.
            4. This is now known as an "lvalue reference".
        2. rvalue reference
            1. C++11 has the concept of an "rvalue reference".
            2. An rvalue reference has a && after the type.
                void func(int&& x);    // function argument is an rvalue reference 
                
                func(2);               // 2 is an rvalue, ok
                                       
                int y = 2;             
                func(y);               // y is an lvalue, not ok (error)
            3. This is a syntactic device.
                1. Indicates that a function argument must be a movable rvalue.
        3. moving into a function argument
            1. A function argument can be an "rvalue reference".
            2. The passed object will be moved into the argument, if
                1. The object is an rvalue.
                2. And, its type is moveable.
            3. Otherwise, the call doesn't compile.
    
    5. std::move()
        1. The std::move() will cast its argument to rvalue.
            // std::move() casts vec to an rvalue
            func(std::move(vec));
        2. This will move vec's data into the function argument.
        3. This should only be done if vec's data is expendable.
            1. After calling func(), vec's data may be empty or unusable.
            2. If we want to use vec again, we must re-assign its data.


Modern C++ Overview Part Four - 

    1. rvalue reference and overloading
        1. Functions can be overloaded on the value type.
            1. Different behavior for lvalues and rvalues.
                void func(const Test& test);    // Called when we pass an lvalue
                void func(Test&& test);         // Called when we pass an rvalue
        2. Usually, the lvalue version will be called.
            1. When we pass a variable.
        3. The rvalue overload will be called.
            1. If we pass a literal or a temporary object.
            2. If we use std::move() to cast a variable.
    
    2.  std::move() semantics and ownership
        1. Consider these overloads.
            void func(const Test& test);    // Called when we pass an lvalue
            void func(Test&& test);         // Called when we pass an rvalue
        2. lvalue argument
            1. Refers to an object outside func().
            2. The function can inspect this object.
            3. It can make its own copy of the object.
        3. rvalue argument
            1. Not owned by any variable.
            2. Or, the variable has lost ownership after a call to std::move().
            3. The "test" object becomes the owner.
    
    3. std::move operator
        1. C++11 has two new special member functions.
            1. The arguments are rvalue references.
        2. Overload of the copy constructor.
            // std::move constructor
            Test(Test&& other) noexcept;
        3. Overload of the assignment operator.
            // std::move assignment operator
            Test& operator = (Test&& other) noexcept;
        4. These operators are called during move operations.
            1. An object is only moveable if the class defines move operators.
    
    4. move-only types
        1. In C++11, some types can be moved, but not copied.
            1. std::fstream, std::iostream
            2. std::unique_ptr
            3. Classes used in multi-threading.
        2. These types follow the "RAII (Resource Acquisition Is Initialization)" idiom.
            1. Only one object can own a given resource instance at a time.
            2. The object acquires ownership in the constructor.
            3. The object releases ownership in the destructor.
            4. The resource instance can be moved from one object to another.
    
    5. std::fstream
        1. A std::fstream has a file handle as a data member.
            1. The constructor opens the file.
            2. The destructor closes the file.
        2. A std::fstream object cannot be copied, but it can be moved.
            1. The moved-from object no longer owns the file handle.
            2. The moved-to object becomes the owner of the file handle.
            3. The file will be closed when the moved-to object is destroyed.

    6. deleted and defaulted operators
        1. In C++11, special member functions can be deleted.
            Test(const Test& other) = delete;    // Deleted copy constructor
        2. This prevents an object from being copied.
            1. The function is defined, but cannot be called.
        3. Special member functions can also be defaulted.
            Test(const Test& other) = default;    // Defaulted copy constructor
        4. This causes the compiler to generate a default member function.
            1. The default copy constructor copies all the class members. 

    7. pass by value ..., or, pass by move
        1. In older C++, the argument is always copied by default.
            // This function makes its own copy of test
            void func(Test test);
        2. In C++11, the argument can be moved, if
            1. It is an rvalue.
            2. And, the type defines move operators.
        3. Otherwise, it will be copied.
            1. Provides compatibility with old code.
        4. All STL containers are moveable.
            1. And, almost all other C++ library types.
            2. All built-in types are regarded as moveable (but are always copied).


Modern C++ Overview Part Five -

    1. lambda-local variables
        1. Variables which are local to the lambda body.
        2. Declared in the capture specifier.
            1. Implicitly "auto".
            2. Must be initialized.
        3. Requires C++14.
            // y is local to the lambda body
            [y = 2] (int x) {
                return x + y;
            };
        4. Can be initialized from captured variables.
        5. No special syntax is needed.
            // Local variable z in this scope
            int z = 1;

            // Lambda body's local variable y
            [y = z + 1] (int x) {
                return x + y;
            };
        6. capture by move
            1. The lambda-local variables can be move initialized.
                std::vector<std::string>strings(5);

                // Lambda expression which captures "strings" by moving it into "vec_strings"
                [vec_strings = std::move(strings)] () {
                    ...  
                };
            2. This allows capture by move.
                1. The type of vec_strings is deduced as std::vector<std::string>.
                2. std::vector's move constructor is called to initialize vec_strings.
                3. The vector elements are now owned by vec_strings.

    2. random numbers in C++11
        1. New classes defined in <random> header.
            1. Avoid a number of issues with std::rand().
        2. Random number engines.
            1. Generate a sequence of random numbers.
        3. Distribution objects.
            1. Scale a sequence of numbers.
            2. Fit them into a given statistical distribution.
        4. We use the uniform distribution.
            1. Every random number should be equally likely.
    
    3. random number classes
        1. Functors which overload operator().
        2. Random number engine.
            1. std::mt19937 is usually the best choice.
            2. Should be declared static.
        3. Distribution object.
            1. std::uniform_int_distribution<T> for integers.
            2. std::uniform_real_distribution<T> for floating-point.
        4. To get a random number.
            1. Call the distribution's operator().
            2. Pass the engine object as argument.
    
    4. std::unique_ptr
        1. Template class defined in <memory> header.
            1. Has a traditional pointer as member.
        2. Supports most pointer operations.
            1. But not increment or decrement.
        3. A move-only class which uses the "RAII (Resource Acquisition Is Initialization)" idiom.
            1. Automatically releases the memory when it goes out of scope.
            2. Allows heap-allocated memory to be used like a stack object.
            3. Has no more overhead than a traditional pointer.
        4. std::unique_ptr initialization
            1. In C++11, we have to provide the pointer.
                // Allocate a single integer with value 42
                std::unique_ptr<int>ptr(new int(42));
            2. C++14 has std::make_unique().
            3. This calls new() internally.
                auto ptr = std::make_unique<int>(42);


++++++++++++++++++++++++++++++++++++++++ Section 3 - Introduction to Concurrency ++++++++++++++++++++++++++++++++++++++++

Concurrency Introduction - 

    1. concurrency
        1. Perform two activities at the same time.
            1. Conceptually different.
        2. A program which executes a long-running task.
            1. Fetching data over the network.
            2. Performing a lengthy computation.
            3. The data fetching and the computation are performed at the same time.
        3. A program which displays feedback to the user.
            1. Hourglass cursor.
            2. Progress counter.
            3. The task and the feedback are performed at the same time.
        4. Standard in operating systems for many years.
        5. Computers run many programs at the same time.
            1. Compiler generates code.
            2. WordProcessor waits for next keystroke.
            3. Mail program fetches a new email.
    
    2. hardware concurrency
        1. Modern computers have multiple processors.
            1. Multiple CPU chips.
            2. CPU chips which contain multiple processor "cores".
        2. Different processors can perform different activities at the same time.
            1. Even within the same program.
        3. These are known as "hardware threads".
            1. Each processor follows its own "thread of execution" through the code.
            2. 1 hardware thread <--> 1 processor core.

    3. software concurrency
        1. Modern operating systems support "software threading".
        2. A program can perfrom multiple activities at the same time.
            1. These activities are managed by the operating system.
        3. Typically there are more software threads than hardware threads.
            1. Some threads may have to stop and wait for something.
            2. While they are waiting, another thread which is ready can run.
    

Concurrency Motivation - 

    1. why is concurrency important?
        1. Had been used by mainframes since the 1960's.
        2. Became wider concern in the mid 1990's.
        3. Four main industry trends.
            1. Rise of the Internet.
                1. Server throughput had to increase dramatically.
            2. Popularity of Windows.
                1. Seperation of concerns (responsiveness).
            3. Popularity of games and multimedia.
                1. Fast numeric computation.
            4. Availability of multi-core processors.
                1. Effective use of hardware.
    
    2. server throughput
        1. A single-threaded server.
        2. Performs each activity as a single "process".
            1. An instance of an executing program.
        3. A server process waits for a client to connect to it.
        4. When a client connects, the server creates a new process.
            1. The child process handles the client.
            2. The server waits for the next connecetion.
        5. The server may need to communicate with a child process.
            1. Control its execution.
            2. Exchange data with it.
        6. This requires "InterProcess Communication (IPC)".
        7. A single-threading causes overhead.
            1. Process creation.
            2. Setting up IPC.
        8. Reduces scalability.
    
    3. seperation of concerns   
        1. A single-threaded program to edit documents.
        2. The user starts a long-running action.
            1. Indexing or formatting a large document.
        3. The program cannot respond to GUI events immediately.
            1. It is executing code to perform the action.
        4. The user interface ignores mouse-clicks, key-presses, etc.
            1. If the program is covered up by another application and then uncovered, it turns into a grey box.
        5. Eventually, the action ends.
            1. The program processess all the stored-up GUI events.
            2. Usually, with undesirable consequences.
            3. Poor user experience.
    
    4. fast numeric computation
        1. Used to require specialized hardware.
            1. Supercomputers and transputers with large number of processors.
            2. Parallel processing architecure.
            3. Specialized programming languages.
            4. Very expensive.
        2. Now feasible on modern general-purpose hardware.
            1. Much lower cost.
            2. Supported by standard programming languages.
        3. But not with single-threaded programs.

    5. effective use of hardware
        1. Demand for faster and more powerful computers.
            1. Make the processor bigger.
            2. Raise the clock frequency.
        2. Hardware engineers approaching physical limits.
            1. Speed at which electrons can move through silicon.
            2. Heat generated.
        3. Hardware designers began using "cores" instead.
            1. Several processors on the same silicon chip.
        4. A single-threaded program can only run on one core at a time.
            1. Only uses a fraction of the system's potential. 
    
    6. benefits of concurrency
        1. Higher server throughput.
            1. The child and the server can run in the same process.
            2. No overhead from creating processess.
            3. Can have direct access to each other's data.
        2. Seperation of concerns
            1. A program can respond to GUI events while performing a lon-running task.
            2. Improves the user experience.
        3. Fast numeric computation.
        4. Effective use of hardware.
            1. A program can execute on different cores at the same time.


Concurrency Overview - 

    1. single-threaded concurrency
        1. Each activity requires a seperate process.
            1. Has one "execution path" or "thread" through the program's code.
        2. May need "InterProcess Communication (IPC)".
            1. A message queue, pipe, semaphore, shared memory, network socket, etc.
        3. A program which displays a progress counter.
            counter.exe <---- start/stop ----> data_cruncher.exe 
        4. Each process has its own private memory space.
            1. Cannot accidently alter another process's data.
        5. Processes can be run on different computers over a network.
        6. Creating a new process can be slow on some systems.
        7. "InterProcess Communication (IPC)".
            1. Adds complication.
            2. Can be slow to set up.
            3. No direct support in C++.
    
    2. multi-threaded concurrency
        1. A single process performs all activities.
        2. Each activity has its own "execution path" or "thread".
        3. Concurrency is achieved by starting a new thread for each activity.
                        <---- start ---- | 
            counter.exe                compute     
                         <---- stop ---- |
                                         | 
                    data_cruncher.exe    ↓

    3. threads 
        1. Each thread is an "independent execution environment".
            1. Has its own execution stack.
            2. Has its own processor state.
        2. These "threads" are "light weight processes".
            1. Less overhead to start up.
            2. Smaller task switching overhead.
            3. Easy to share data between threads.
        3. All the threads in a process share its memory space.
            1. Can access global data.
            2. Pointers can be passed between threads.
        4. Lack of data protection between threads.
            1. Can cause data inconsistency and data corruption.
            2. Requires careful programming.
    
    4. advantages of concurrency
        1. Improves responsiveness of the program.
            1. The user is never left staring at a "stuck" program.
        2. Improves throughput.
            1. Processing large amounts of data in parallel takes less time.
        3. Allows seperation of logically distinct operations.
            1. A mail program starts new threads.
            2. Compose an email.
            3. New fetch messages, etc.
        4. Takes full advantage of modern hardware.
            1. Threads can be distributed among processor cores.      

    5. disadvantages of concurrency
        1. Adds complexity to programs.
            1. Code is harder to write and harder to understand.
            2. Bugs are more likely.
            3. Requires careful programming.
        2. May not result in faster programs.
            1. Data protection overhead.
            2. Thread coordination overhead.
        3. Use only when the benefits outweigh the costs.


Threaded Program Structure - 

    1. single-threaded C++ program structure
        1. A non-threaded C++ programs have a single thread.
            1. When this thread starts, it executes the code in main().
            2. The main() is the entry point function for the thread.
        2. The main() can call other functions.
            1. These run in the main thread.
        3. When main() returns, the thread ends.
            1. The program ends when the main thread ends.
        4. single-threaded program
            // The program starts the main thread.
            // The main thread executes all the instructions in main().
                        main thread
                            |
                            |
                            ↓ 

    2. multi-threaded C++ program structure
        1. A multi-threaded C++ programs also have a main thread.
            1. The main thread starts additional threads.
            2. These could, in turn, start further threads.
        2. Each thread has its own entry point function.
            1. When the thread starts, it executes the code in this function.
            2. When the function returns, the thread ends.
            3. The main thread continues to execute its own code.
            4. It doesn't wait for the other threads, unless we explicitly tell it to.
        3. multi-threaded program
            // The program starts the main thread.
            // The main thread executes all the instructions in main().
            // The main thread also starts two other threads.
            // The threads 2 and 3, execute their own code concurrently.
                        main thread  thread 2  thread 3
                            |           |        |
                            |           |        |
                            ↓           ↓        ↓ 

A Brief History Of C++ Concurrency - 

    1. multi-threading with C API's
        1. At first, no direct support for threads in C++.
        2. Programmers could only use threads through C interfaces.
            1. pthreads library
                1. For POSIX systems
            2. Windows API's
                1. Provided access to threads in the "Base Services".
            3. Various Unix API's
                1. System calls provided access to operating system's thread support.
                2. Varied between providers.
            4. OpenMP
                1. Process C-style array loops in parallel.

    2. multi-threading with C++ API's 
        1. Later, C++ libraries appeared.
            1. ACE
                1. A cross-platform networking library with support for threads.
            2. Boost
                1. Project to develop new features for C++.
                2. Basically a wrapper around the operating system's threading facilities.
                3. Provided a consistent interface.
                4. Used as basis for C++11 thread support.
            3. Poco
                1. A more modern and lightweight version of ACE.
    
    3. multi-threading with standard C++
        1. C++ added support for concurreny in 2011.
        2. Programmers can write threaded code which is,
            1. Portable and efficient.
            2. Has well-defined semantics.
            3. Allows fine-grained control at low levels.
        3. Standard library changes.
            1. Features added to create and manage threads.
            2. All classes and functions made thread-safe.
    
    4. multi-threading with C++11
        1. The "std::thread class" is the "base level of concurrency".  
            1. Rather low-level implementation.
            2. Maps onto a "software thread".
            3. Managed by the "operating system".
            4. Similar to Boost threads, but with some important differences.
                1. No thread cancellation.
                2. Different argument passing semantics.
                3. Different behavior on thread destruction.
    
    5. multi-threading with later C++
        1. C++14
            1. read-write locks
        2. C++17
            1. Many standard algorithms can execute in parallel.
        3. C++20
            1. Joining threads. 
            2. Thread cancellation.
            3. Coroutines, semaphores, latches, and barriers.
        4. C++23
            1. Improved support for coroutines.
    
    6. threads and tasks
        1. These words are often used interchangeably.
        2. A thread is,
            1. A software thread.
            2. An object of the C++ std::thread class.
        3. A task is,
            1. A higher-level abstraction.
            2. Some work that should be performed concurrently.


Keep Coding!!!